cmake_minimum_required (VERSION 2.8.10)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules")

project (Smoke)

    # Compiler-specific C++11 activation/checks.
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
        if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.7 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 4.7))
            message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7 or greater.")
        endif ()
        set(CMAKE_CXX_FLAGS                "-Wall -Wextra -Wno-unused -std=c++11 -pedantic -fPIC ")
        set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
        set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
    elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
        if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 3.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 3.0))
            message(FATAL_ERROR "${PROJECT_NAME} requires clang 3.0 or greater.")
        endif ()
        ## -Wno-ignored-qualifiers and -Wno-overloaded-virtual silence warnings in OGRE headers
        set(CMAKE_CXX_FLAGS                "-Wall -Wextra -Wno-unused -Wno-ignored-qualifiers -Wno-overloaded-virtual -std=c++11 -pedantic -fPIC")
        set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
        set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
    elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "MSVC")
        if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 17.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 17.0))
            message(FATAL_ERROR "${PROJECT_NAME} requires vs2012 or greater.")
        endif ()
    elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Intel")
        set(CMAKE_CXX_FLAGS                "-Wall -Wextra -Wno-unused -std=c++11 -pedantic -fPIC ")
        set(CMAKE_CXX_FLAGS_DEBUG          "-O0 -g")
        set(CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELEASE        "-O4 -DNDEBUG")
        set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g")
        if (NOT (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 13.0 OR CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL 13.0))
            message(FATAL_ERROR "${PROJECT_NAME} requires icc 13 or greater.")
        endif ()
    else ()
        message(FATAL_ERROR "Your C++ compiler does not have the required C++11 support.")
    endif ()
    
    add_subdirectory(Base)
    ##add_subdirectory(External)
    
    add_subdirectory(Framework)
    list(APPEND SMOKE_LIBRARIES Framework)
    
    add_subdirectory(Systems)
    list(APPEND SMOKE_DEPEDENCIES SystemAI)
    list(APPEND SMOKE_DEPEDENCIES SystemAudioFMOD)
    list(APPEND SMOKE_DEPEDENCIES SystemExplosion)
    list(APPEND SMOKE_DEPEDENCIES SystemGeometry)
    list(APPEND SMOKE_DEPEDENCIES SystemGraphicsOGRE)
    list(APPEND SMOKE_DEPEDENCIES SystemInputOIS)
    find_package(HAVOK)
    if (HAVOK_FOUND)
        list(APPEND SMOKE_DEPEDENCIES SystemPhysicsHAVOK)
    endif ()

    list(APPEND SKUNKWORKS_INCLUDE_DIRS ${CMAKE_SOURCE_DIR})
    
    include_directories(${SMOKE_INCLUDE_DIRS} )
    add_executable(Smoke Main.cpp)
    add_dependencies(Smoke ${SMOKE_DEPEDENCIES} )
    target_link_libraries(Smoke ${SMOKE_LIBRARIES})
